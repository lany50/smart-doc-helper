const API_CONFIG = (() => {
    if (typeof window.NETLIFY_API_KEY !== 'undefined' && window.NETLIFY_API_KEY) {
        console.log('üöÄ NetlifyÁéØÂ¢ÉÂèòÈáè');
        return {
            baseURL: window.NETLIFY_API_BASE_URL || 'https://api.st0722.top/v1',
            apiKey: window.NETLIFY_API_KEY
        };
    }
    if (typeof window.LOCAL_API_CONFIG !== 'undefined') {
        console.log('üíª Êú¨Âú∞ÈÖçÁΩÆ');
        return window.LOCAL_API_CONFIG;
    }
    console.error('‚ùå ÈÖçÁΩÆÊú™ÊâæÂà∞');
    return { baseURL: 'https://api.st0722.top/v1', apiKey: '' };
})();
console.log('‚úÖ APIÈÖçÁΩÆ:', { hasKey: !!API_CONFIG.apiKey });
// script.js - ‰∏ªÁ®ãÂ∫èÊñá‰ª∂
// APIÈÖçÁΩÆ‰ªé config.js Âä†ËΩΩ

// Â∫îÁî®ÊñáÊâπÊîπÊèêÁ§∫ËØçÔºàÊª°ÂàÜ15ÂàÜÔºåÂ≠óÊï∞80ËØçÂ∑¶Âè≥Ôºâ
const APPLICATION_GRADING_PROMPT = `‰Ω†ÊòØ‰∏ÄÂêçÁ≤æÈÄö‰∏≠ÂõΩÈ´òËÄÉËã±ËØ≠Â∫îÁî®ÊñáÂÜô‰ΩúÊåáÂØºÁöÑËÄÅÂ∏àÔºåÂÖ∑Â§áÂº∫Â§ßÁöÑÈÄªËæëÂàÜÊûêÂíåËØ≠Ë®ÄÊ∂¶Ëâ≤ËÉΩÂäõ„ÄÇ

Áé∞Âú®ÔºåËØ∑ÊâπÊîπ‰ª•‰∏ãÂ≠¶Áîü‰ΩúÊñáÔºö

„ÄêÈ¢òÁõÆË¶ÅÊ±Ç„Äë
{TOPIC}

„ÄêÂ≠¶Áîü‰ΩúÊñá„Äë
{ESSAY}

ËØ∑‰∏•Ê†ºÊåâÁÖß‰ª•‰∏ãJSONÊ†ºÂºèËæìÂá∫ÊâπÊîπÁªìÊûúÔºàÊª°ÂàÜ15ÂàÜÔºåÂª∫ËÆÆÂ≠óÊï∞80ËØçÂ∑¶Âè≥ÔºâÔºö

{
  "totalScore": 0,
  "scores": {
    "content": 0,
    "language": 0,
    "structure": 0
  },
  "contentReview": "ÂÜÖÂÆπÁÇπËØÑÊñáÂ≠ó...",
  "highlights": ["‰∫ÆÁÇπ1", "‰∫ÆÁÇπ2", "‰∫ÆÁÇπ3"],
  "problems": ["ÈóÆÈ¢ò1", "ÈóÆÈ¢ò2"],
  "suggestions": "ÊîπËøõÂª∫ËÆÆÊñáÂ≠ó...",
  "modelAnswer": "ËåÉÊñáÂÜÖÂÆπÔºàÁ∫¶80ËØçÔºâ...",
  "tips": "ÊèêÂàÜÁßòËØÄÊñáÂ≠ó..."
}

ËØÑÂàÜÊ†áÂáÜÔºàÊª°ÂàÜ15ÂàÜÔºâÔºö
- ÂÜÖÂÆπÂÆåÊï¥ÊÄßÔºà5ÂàÜÔºâÔºöÊòØÂê¶ÂÆåÊàêÈ¢òÁõÆË¶ÅÊ±ÇÁöÑÊâÄÊúâË¶ÅÁÇπ
- ËØ≠Ë®ÄË°®ËææÔºà7ÂàÜÔºâÔºöËØçÊ±á„ÄÅËØ≠Ê≥ï„ÄÅÂè•ÂºèÁöÑÂáÜÁ°ÆÊÄßÂíåÂ§öÊ†∑ÊÄß
- ÁØáÁ´†ÁªìÊûÑÔºà3ÂàÜÔºâÔºöÈÄªËæëÊÄß„ÄÅË°îÊé•ÊÄß„ÄÅÊ†ºÂºèËßÑËåÉ

Â≠óÊï∞Ë¶ÅÊ±ÇÔºö
- Â∫îÁî®ÊñáÂª∫ËÆÆ80ËØçÂ∑¶Âè≥
- 60-100ËØç‰πãÈó¥‰∏∫ÂêàÁêÜÂå∫Èó¥
- ‰Ωé‰∫é60ËØçÊàñÈ´ò‰∫é100ËØç‰ºöÈÄÇÂΩìÊâ£ÂàÜ

Ê≥®ÊÑèÔºö
1. totalScore = content + language + structureÔºåÊª°ÂàÜ15ÂàÜ
2. ÊâÄÊúâÊñáÂ≠óÂÜÖÂÆπ‰ΩøÁî®ÁÆÄ‰Ωì‰∏≠Êñá
3. highlightsÂíåproblemsÊï∞ÁªÑËá≥Â∞ëÂêÑÂåÖÂê´2-3Êù°
4. modelAnswerÂøÖÈ°ªÊòØÂÆåÊï¥ÁöÑËåÉÊñáÔºåÁ∫¶80ËØç
5. ËØ∑Á°Æ‰øùËæìÂá∫ÊòØÊúâÊïàÁöÑJSONÊ†ºÂºè

ËØ∑ÂºÄÂßãÊâπÊîπÔºö`;

// ÂÜô‰ΩúÊÄùË∑ØÊåáÂØºÊèêÁ§∫ËØç
const WRITING_GUIDANCE_PROMPT = `‰Ω†ÊòØ‰∏ÄÂêçÁ≤æÈÄö‰∏≠ÂõΩÈ´òËÄÉËã±ËØ≠Â∫îÁî®ÊñáÂÜô‰ΩúÊåáÂØºÁöÑËÄÅÂ∏à„ÄÇ

Â≠¶ÁîüÂêë‰Ω†Êèê‰æõ‰∫Ü‰ª•‰∏ã‰ΩúÊñáÈ¢òÁõÆÔºö

„ÄêÈ¢òÁõÆË¶ÅÊ±Ç„Äë
{TOPIC}

ËØ∑‰∏∫Â≠¶ÁîüÊèê‰æõËØ¶ÁªÜÁöÑÂÜô‰ΩúÊÄùË∑ØÊåáÂØºÔºåÂåÖÊã¨Ôºö

1. **È¢òÁõÆÂàÜÊûê**
   - ÂÜô‰ΩúÁ±ªÂûãÔºàÂª∫ËÆÆ‰ø°/ÈÇÄËØ∑‰ø°/ÈÅìÊ≠â‰ø°Á≠âÔºâ
   - ÂÖ≥ÈîÆË¶ÅÁÇπÊèêÂèñ
   - Â≠óÊï∞Ë¶ÅÊ±ÇÔºàÂª∫ËÆÆ80ËØçÂ∑¶Âè≥Ôºâ

2. **ÂÜô‰ΩúÊ°ÜÊû∂**
   - ÂºÄÂ§¥ÔºöÂ¶Ç‰ΩïÁß∞ÂëºÂíåÂºÄÂú∫
   - ‰∏ª‰ΩìÊÆµËêΩÔºöÈúÄË¶ÅÂåÖÂê´Âì™‰∫õÂÜÖÂÆπË¶ÅÁÇπ
   - ÁªìÂ∞æÔºöÂ¶Ç‰ΩïÁ§ºË≤åÊî∂Â∞æ

3. **ËØ≠Ë®ÄÂª∫ËÆÆ**
   - Êé®Ëçê‰ΩøÁî®ÁöÑÈ´òÁ∫ßËØçÊ±áÂíåÁü≠ËØ≠
   - ÈÄÇÂêàÁöÑÂè•ÂºèÁªìÊûÑ
   - Ê≥®ÊÑè‰∫ãÈ°πÔºàÊó∂ÊÄÅ„ÄÅËØ≠Ê∞îÁ≠âÔºâ

4. **ËåÉÊñáÁ§∫‰æã**
   Êèê‰æõ‰∏ÄÁØáÁ¨¶ÂêàË¶ÅÊ±ÇÁöÑ‰ºòÁßÄËåÉÊñáÔºàÁ∫¶80ËØçÔºâ

ËØ∑Áî®ÁÆÄÊ¥ÅÊ∏ÖÊô∞ÁöÑ‰∏≠ÊñáËÆ≤Ëß£ÔºåÂ∏ÆÂä©Â≠¶ÁîüÂø´ÈÄüÁêÜËß£ÂÜô‰ΩúÊÄùË∑Ø„ÄÇ`;

// ÂÖ®Â±ÄÂèòÈáè
let uploadedImages = []; // Â≠òÂÇ®‰∏ä‰º†ÁöÑÂõæÁâá
let ocrResults = []; // Â≠òÂÇ®OCRÁªìÊûú

// Á≠âÂæÖDOMÂä†ËΩΩÂÆåÊàê
document.addEventListener('DOMContentLoaded', function() {
    initApp();
});

function initApp() {
    // ========== Ê®°ÂºèÂàáÊç¢ ==========
    const normalModeBtn = document.getElementById('normalModeBtn');
    const essayModeBtn = document.getElementById('essayModeBtn');
    const normalMode = document.getElementById('normalMode');
    const essayMode = document.getElementById('essayMode');
    
    normalModeBtn.addEventListener('click', () => {
        normalModeBtn.classList.add('active');
        essayModeBtn.classList.remove('active');
        normalMode.classList.remove('hidden');
        essayMode.classList.add('hidden');
    });
    
    essayModeBtn.addEventListener('click', () => {
        essayModeBtn.classList.add('active');
        normalModeBtn.classList.remove('active');
        essayMode.classList.remove('hidden');
        normalMode.classList.add('hidden');
    });
    
    // ========== ÊôÆÈÄöOCRÊ®°Âºè ==========
    initNormalMode();
    
    // ========== Ëã±ËØ≠‰ΩúÊñáÊ®°Âºè ==========
    initEssayMode();
}

// ========================================
// ÊôÆÈÄöOCRÊ®°Âºè
// ========================================
function initNormalMode() {
    const dropZone = document.getElementById('normalDropZone');
    const fileInput = document.getElementById('normalFileInput');
    const selectBtn = document.getElementById('normalSelectBtn');
    const modelSelect = document.getElementById('normalModelSelect');
    const progressDiv = document.getElementById('normalProgress');
    const progressBar = document.getElementById('normalProgressBar');
    const progressText = document.getElementById('normalProgressText');
    const resultDiv = document.getElementById('normalResult');
    const previewImg = document.getElementById('normalPreview');
    const extractedText = document.getElementById('normalExtractedText');
    const copyBtn = document.getElementById('normalCopyBtn');
    const downloadBtn = document.getElementById('normalDownloadBtn');
    const newBtn = document.getElementById('normalNewBtn');
    
    // ÁÇπÂáª‰∏ä‰º†
    selectBtn.addEventListener('click', () => fileInput.click());
    dropZone.addEventListener('click', (e) => {
        if (e.target === dropZone || e.target.closest('svg') || e.target.closest('h3') || e.target.closest('p')) {
            fileInput.click();
        }
    });
    
    // Êñá‰ª∂ÈÄâÊã©
    fileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) handleNormalOCR(file);
    });
    
    // ÊãñÊãΩ‰∏ä‰º†
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });
    
    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('dragover');
    });
    
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        const file = e.dataTransfer.files[0];
        if (file) handleNormalOCR(file);
    });
    
    // Â§çÂà∂ÊåâÈíÆ
    copyBtn.addEventListener('click', () => {
        navigator.clipboard.writeText(extractedText.textContent).then(() => {
            showToast('Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø', 'success');
        });
    });
    
    // ‰∏ãËΩΩÊåâÈíÆ
    downloadBtn.addEventListener('click', () => {
        const text = extractedText.textContent;
        downloadTextFile(text, `OCRËØÜÂà´ÁªìÊûú_${new Date().toISOString().slice(0, 10)}.txt`);
    });
    
    // Êñ∞ÊñáÊ°£ÊåâÈíÆ
    newBtn.addEventListener('click', () => {
        resultDiv.classList.add('hidden');
        fileInput.value = '';
        extractedText.textContent = '';
        previewImg.src = '';
        progressBar.style.width = '0%';
    });
    
    // Â§ÑÁêÜOCR
    async function handleNormalOCR(file) {
        if (!validateImageFile(file)) return;
        
        try {
            // ÊòæÁ§∫ËøõÂ∫¶
            resultDiv.classList.add('hidden');
            progressDiv.classList.remove('hidden');
            
            // Ê®°ÊãüËøõÂ∫¶
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 15;
                if (progress > 90) progress = 90;
                progressBar.style.width = `${progress}%`;
                
                if (progress < 30) progressText.textContent = 'ÂáÜÂ§á‰∏≠...';
                else if (progress < 60) progressText.textContent = 'ËøûÊé•AI...';
                else progressText.textContent = 'ËØÜÂà´‰∏≠...';
            }, 200);
            
            // ËΩ¨Êç¢‰∏∫base64
            const base64 = await fileToBase64(file);
            
            // Ë∞ÉÁî®OCR
            const model = modelSelect.value;
            const result = await callOCR(base64, model);
            
            // ÂÆåÊàêËøõÂ∫¶
            clearInterval(progressInterval);
            progressBar.style.width = '100%';
            progressText.textContent = 'ËØÜÂà´ÂÆåÊàêÔºÅ';
            
            // ÊòæÁ§∫ÁªìÊûú
            setTimeout(() => {
                progressDiv.classList.add('hidden');
                previewImg.src = base64;
                extractedText.textContent = result.text;
                resultDiv.classList.remove('hidden');
                showToast('ËØÜÂà´ÊàêÂäü', 'success');
            }, 500);
            
        } catch (error) {
            console.error('OCRÂ§±Ë¥•:', error);
            progressDiv.classList.add('hidden');
            showToast('ËØÜÂà´Â§±Ë¥•: ' + error.message, 'error');
        }
    }
}

// ========================================
// Ëã±ËØ≠‰ΩúÊñáÊ®°Âºè
// ========================================
function initEssayMode() {
    const dropZone = document.getElementById('essayDropZone');
    const fileInput = document.getElementById('essayFileInput');
    const selectBtn = document.getElementById('essaySelectBtn');
    const imagePreviewList = document.getElementById('imagePreviewList');
    const startOcrBtn = document.getElementById('startOcrBtn');
    const ocrModel = document.getElementById('essayOcrModel');
    const progressDiv = document.getElementById('essayProgress');
    const progressBar = document.getElementById('essayProgressBar');
    const progressText = document.getElementById('essayProgressText');
    const progressCount = document.getElementById('essayProgressCount');
    const ocrResult = document.getElementById('essayOcrResult');
    
    // OCRÁªìÊûúÂå∫
    const ocrResultTextarea = document.getElementById('essayContent');
    const wordCount = document.getElementById('essayWordCount');
    const wordHint = document.getElementById('essayWordHint');
    const sendBtn = document.getElementById('sendToGradeBtn');
    const clearEssayBtn = document.getElementById('clearEssayBtn');
    const copyAllBtn = document.getElementById('copyAllBtn');
    
    // ÊâπÊîπÂå∫
    const gradingTopic = document.getElementById('gradingTopic');
    const gradingEssay = document.getElementById('gradingEssay');
    const gradingWordCount = document.getElementById('gradingWordCount');
    const gradingWordStatus = document.getElementById('gradingWordStatus');
    const gradingModel = document.getElementById('gradingModel');
    const startGradingBtn = document.getElementById('startGradingBtn');
    const getGuidanceBtn = document.getElementById('getGuidanceBtn');
    const gradingInput = document.getElementById('gradingInput');
    const gradingProgress = document.getElementById('gradingProgress');
    const gradingProgressBar = document.getElementById('gradingProgressBar');
    const gradingProgressText = document.getElementById('gradingProgressText');
    const gradingTimeEst = document.getElementById('gradingTimeEst');
    const gradingResult = document.getElementById('gradingResult');
    const gradingResultContent = document.getElementById('gradingResultContent');
    const totalScoreEl = document.getElementById('totalScore');
    const scoreStarsEl = document.getElementById('scoreStars');
    const contentScoreEl = document.getElementById('contentScore');
    const languageScoreEl = document.getElementById('languageScore');
    const structureScoreEl = document.getElementById('structureScore');
    const copyResultBtn = document.getElementById('copyResultBtn');
    const downloadResultBtn = document.getElementById('downloadResultBtn');
    const newGradingBtn = document.getElementById('newGradingBtn');
    
    // ÂÜô‰ΩúÊÄùË∑ØÂå∫
    const guidanceResult = document.getElementById('guidanceResult');
    const guidanceContent = document.getElementById('guidanceContent');
    const copyGuidanceBtn = document.getElementById('copyGuidanceBtn');
    const downloadGuidanceBtn = document.getElementById('downloadGuidanceBtn');
    const newGuidanceBtn = document.getElementById('newGuidanceBtn');
    
    // ========== OCRÈÉ®ÂàÜ ==========
    
    // ÁÇπÂáª‰∏ä‰º†
    selectBtn.addEventListener('click', () => fileInput.click());
    dropZone.addEventListener('click', (e) => {
        if (e.target === dropZone || e.target.closest('svg') || e.target.closest('p')) {
            fileInput.click();
        }
    });
    
    // Êñá‰ª∂ÈÄâÊã©ÔºàÊîØÊåÅÂ§öÈÄâÔºâ
    fileInput.addEventListener('change', (e) => {
        const files = Array.from(e.target.files);
        if (files.length > 0) {
            addImagesToList(files);
        }
    });
    
    // ÊãñÊãΩ
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });
    
    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('dragover');
    });
    
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        const files = Array.from(e.dataTransfer.files);
        if (files.length > 0) {
            addImagesToList(files);
        }
    });
    
    // Ê∑ªÂä†ÂõæÁâáÂà∞ÂàóË°®
    function addImagesToList(files) {
        const validFiles = files.filter(file => validateImageFile(file, false));
        
        validFiles.forEach(file => {
            uploadedImages.push(file);
        });
        
        updateImagePreviewList();
        
        if (uploadedImages.length > 0) {
            imagePreviewList.classList.remove('hidden');
            startOcrBtn.classList.remove('hidden');
        }
    }
    
    // Êõ¥Êñ∞ÂõæÁâáÈ¢ÑËßàÂàóË°®
    function updateImagePreviewList() {
        imagePreviewList.innerHTML = '';
        
        uploadedImages.forEach((file, index) => {
            const previewItem = document.createElement('div');
            previewItem.className = 'image-preview-item';
            
            const reader = new FileReader();
            reader.onload = (e) => {
                previewItem.innerHTML = `
                    <img src="${e.target.result}" alt="È¢ÑËßà">
                    <div class="info">
                        <div class="name">${file.name}</div>
                        <div class="size">${(file.size / 1024).toFixed(1)} KB</div>
                    </div>
                    <button class="remove-btn" data-index="${index}">Âà†Èô§</button>
                `;
                
                // Âà†Èô§ÊåâÈíÆ
                previewItem.querySelector('.remove-btn').addEventListener('click', () => {
                    uploadedImages.splice(index, 1);
                    updateImagePreviewList();
                    
                    if (uploadedImages.length === 0) {
                        imagePreviewList.classList.add('hidden');
                        startOcrBtn.classList.add('hidden');
                    }
                });
            };
            reader.readAsDataURL(file);
            
            imagePreviewList.appendChild(previewItem);
        });
    }
    
    // ÂºÄÂßãOCRËØÜÂà´
    startOcrBtn.addEventListener('click', async () => {
        if (uploadedImages.length === 0) return;
        
        try {
            // ÈöêËóè‰∏ä‰º†Âå∫ÂüüÔºåÊòæÁ§∫ËøõÂ∫¶
            imagePreviewList.classList.add('hidden');
            startOcrBtn.classList.add('hidden');
            progressDiv.classList.remove('hidden');
            ocrResult.classList.add('hidden');
            
            ocrResults = [];
            const model = ocrModel.value;
            
            // ÈÄê‰∏™ËØÜÂà´ÂõæÁâá
            for (let i = 0; i < uploadedImages.length; i++) {
                const file = uploadedImages[i];
                
                // Êõ¥Êñ∞ËøõÂ∫¶
                progressCount.textContent = `${i + 1}/${uploadedImages.length}`;
                progressText.textContent = `Ê≠£Âú®ËØÜÂà´Á¨¨ ${i + 1} Âº†ÂõæÁâá...`;
                progressBar.style.width = `${((i) / uploadedImages.length) * 100}%`;
                
                // ËΩ¨Êç¢‰∏∫base64
                const base64 = await fileToBase64(file);
                
                // Ë∞ÉÁî®OCR
                const result = await callEssayOCR(base64, model);
                ocrResults.push(result.text);
                
                // Êõ¥Êñ∞ËøõÂ∫¶
                progressBar.style.width = `${((i + 1) / uploadedImages.length) * 100}%`;
            }
            
            // ÂÆåÊàê
            progressText.textContent = 'ËØÜÂà´ÂÆåÊàêÔºÅ';
            
            // ÂêàÂπ∂ÊâÄÊúâËØÜÂà´ÁªìÊûú
            const mergedText = ocrResults.join('\n\n---\n\n');
            
            setTimeout(() => {
                progressDiv.classList.add('hidden');
                
                // ÂÖ®ÈÉ®ÊòæÁ§∫Âú®‰∏Ä‰∏™ÊñáÊú¨Ê°Ü‰∏≠
                ocrResultTextarea.value = mergedText;
                updateWordCount(mergedText, wordCount, wordHint);
                sendBtn.disabled = !mergedText.trim();
                
                ocrResult.classList.remove('hidden');
                showToast(`ÊàêÂäüËØÜÂà´ ${uploadedImages.length} Âº†ÂõæÁâá`, 'success');
                
                // Ê∏ÖÁ©∫ÂõæÁâáÂàóË°®
                uploadedImages = [];
                fileInput.value = '';
            }, 500);
            
        } catch (error) {
            console.error('OCRÂ§±Ë¥•:', error);
            progressDiv.classList.add('hidden');
            imagePreviewList.classList.remove('hidden');
            startOcrBtn.classList.remove('hidden');
            showToast('ËØÜÂà´Â§±Ë¥•: ' + error.message, 'error');
        }
    });
    
    // ÂÖ®ÈÉ®Â§çÂà∂ÊåâÈíÆ
    copyAllBtn.addEventListener('click', () => {
        const text = ocrResultTextarea.value;
        if (!text.trim()) {
            showToast('Ê≤°ÊúâÂÜÖÂÆπÂèØÂ§çÂà∂', 'error');
            return;
        }
        
        navigator.clipboard.writeText(text).then(() => {
            showToast('Â∑≤Â§çÂà∂ÂÖ®ÈÉ®ÂÜÖÂÆπÂà∞Ââ™Ë¥¥Êùø', 'success');
        }).catch(() => {
            // ÈôçÁ∫ßÊñπÊ°àÔºöÈÄâ‰∏≠ÊñáÊú¨
            ocrResultTextarea.select();
            showToast('ËØ∑ÊâãÂä®Â§çÂà∂ÈÄâ‰∏≠ÁöÑÊñáÊú¨', 'success');
        });
    });
    
    // Ê∏ÖÁ©∫ÊåâÈíÆ
    clearEssayBtn.addEventListener('click', () => {
        ocrResultTextarea.value = '';
        wordCount.textContent = 'Â≠óÊï∞: 0 ËØç';
        wordHint.textContent = 'Âª∫ËÆÆ: 80ËØçÂ∑¶Âè≥';
        sendBtn.disabled = true;
    });
    
    // Â≠óÊï∞ÁªüËÆ°
    ocrResultTextarea.addEventListener('input', () => {
        updateWordCount(ocrResultTextarea.value, wordCount, wordHint);
        sendBtn.disabled = !ocrResultTextarea.value.trim();
    });
    
    // ÂèëÈÄÅÂà∞ÊâπÊîπÂå∫
    sendBtn.addEventListener('click', () => {
        const fullText = ocrResultTextarea.value;
        
        if (confirm('üì§ ÂèëÈÄÅÂà∞ÊâπÊîπÂå∫\n\nËØÜÂà´ÁªìÊûúÂ∞ÜÂ§çÂà∂Âà∞‰ΩúÊñáÊ°Ü„ÄÇ\nËØ∑ÊÇ®ÊâãÂä®Â∞ÜÈ¢òÁõÆÈÉ®ÂàÜÂ§çÂà∂Âà∞"È¢òÁõÆË¶ÅÊ±Ç"Ê°Ü‰∏≠„ÄÇ\n\nÁÇπÂáªÁ°ÆÂÆöÁªßÁª≠„ÄÇ')) {
            gradingTopic.value = '';
            gradingEssay.value = fullText;
            
            const count = countWords(gradingEssay.value);
            gradingWordCount.textContent = count;
            
            // Êõ¥Êñ∞Â≠óÊï∞Áä∂ÊÄÅ
            gradingEssay.dispatchEvent(new Event('input'));
            
            // ÊªöÂä®Âà∞ÊâπÊîπÂå∫
            document.querySelector('#gradingInput').scrollIntoView({ behavior: 'smooth', block: 'center' });
            showToast('Â∑≤ÂèëÈÄÅÔºÅËØ∑Â∞ÜÈ¢òÁõÆÈÉ®ÂàÜÂ§çÂà∂Âà∞"È¢òÁõÆË¶ÅÊ±Ç"Ê°Ü', 'success');
        }
    });
    
    // ========== ÊâπÊîπÂå∫ÈÉ®ÂàÜ ==========
    
    // ÊâπÊîπÂå∫Â≠óÊï∞ÁªüËÆ°
    gradingEssay.addEventListener('input', () => {
        const count = countWords(gradingEssay.value);
        gradingWordCount.textContent = count;
        
        // Â≠óÊï∞Áä∂ÊÄÅÊèêÁ§∫
        if (count === 0) {
            gradingWordStatus.textContent = '';
            gradingWordStatus.className = 'text-xs';
        } else if (count >= 60 && count <= 100) {
            gradingWordStatus.textContent = '‚úÖ Â≠óÊï∞ÂêàÈÄÇ';
            gradingWordStatus.className = 'text-xs word-count-good';
        } else if (count < 60) {
            gradingWordStatus.textContent = `‚ö†Ô∏è ÂÅèÂ∞ë (Âª∫ËÆÆ60-100ËØç)`;
            gradingWordStatus.className = 'text-xs word-count-warning';
        } else if (count > 100) {
            gradingWordStatus.textContent = `‚ö†Ô∏è ÂÅèÂ§ö (Âª∫ËÆÆ60-100ËØç)`;
            gradingWordStatus.className = 'text-xs word-count-warning';
        }
        
        updateGradingButtons();
    });
    
    gradingTopic.addEventListener('input', () => {
        updateGradingButtons();
    });
    
    // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
    function updateGradingButtons() {
        const hasTopic = gradingTopic.value.trim().length > 0;
        const hasEssay = gradingEssay.value.trim().length > 0;
        
        // Âè™ÊúâÈ¢òÁõÆÔºöÂèØ‰ª•Ëé∑ÂèñÊÄùË∑Ø
        getGuidanceBtn.disabled = !hasTopic;
        
        // È¢òÁõÆ+‰ΩúÊñáÔºöÂèØ‰ª•ÊâπÊîπ
        startGradingBtn.disabled = !hasTopic || !hasEssay;
    }
    
    // Ëé∑ÂèñÂÜô‰ΩúÊÄùË∑Ø
    getGuidanceBtn.addEventListener('click', async () => {
        try {
            gradingInput.classList.add('hidden');
            gradingProgress.classList.remove('hidden');
            gradingResult.classList.add('hidden');
            guidanceResult.classList.add('hidden');
            
            const topic = gradingTopic.value;
            const model = gradingModel.value;
            
            // ËøõÂ∫¶ÊèêÁ§∫
            gradingProgressText.textContent = 'AIÊ≠£Âú®ÂàÜÊûêÈ¢òÁõÆ...';
            gradingTimeEst.textContent = 'È¢ÑËÆ°ÈúÄË¶Å 8-12 Áßí';
            
            // Ê®°ÊãüËøõÂ∫¶
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 10;
                if (progress > 90) progress = 90;
                gradingProgressBar.style.width = `${progress}%`;
                
                if (progress < 40) {
                    gradingProgressText.textContent = 'AIÊ≠£Âú®ÂàÜÊûêÈ¢òÁõÆ...';
                } else if (progress < 70) {
                    gradingProgressText.textContent = 'AIÊ≠£Âú®ÊûÑÊÄùÂÜô‰ΩúÊ°ÜÊû∂...';
                } else {
                    gradingProgressText.textContent = 'AIÊ≠£Âú®ÁîüÊàêËåÉÊñáÁ§∫‰æã...';
                }
            }, 400);
            
            const result = await getWritingGuidance(topic, model);
            
            clearInterval(progressInterval);
            gradingProgressBar.style.width = '100%';
            gradingProgressText.textContent = 'ÊÄùË∑ØÁîüÊàêÂÆåÊàêÔºÅ';
            
            setTimeout(() => {
                gradingProgress.classList.add('hidden');
                displayGuidanceResult(result);
                guidanceResult.classList.remove('hidden');
                showToast('ÂÜô‰ΩúÊÄùË∑ØÂ∑≤ÁîüÊàê', 'success');
            }, 500);
            
        } catch (error) {
            console.error('ÊÄùË∑ØÁîüÊàêÂ§±Ë¥•:', error);
            gradingProgress.classList.add('hidden');
            gradingInput.classList.remove('hidden');
            showToast('ÊÄùË∑ØÁîüÊàêÂ§±Ë¥•: ' + error.message, 'error');
        }
    });
    
    // ÂºÄÂßãÊâπÊîπ
    startGradingBtn.addEventListener('click', async () => {
        try {
            gradingInput.classList.add('hidden');
            gradingProgress.classList.remove('hidden');
            gradingResult.classList.add('hidden');
            guidanceResult.classList.add('hidden');
            
            const topic = gradingTopic.value;
            const essay = gradingEssay.value;
            const model = gradingModel.value;
            
            // Ê†πÊçÆÊ®°Âûã‰º∞ÁÆóÊó∂Èó¥
            let estimatedTime = '10-15 Áßí';
            if (model === 'GPT-OSS-120B') {
                estimatedTime = '5-10 Áßí';
            } else if (model === 'enterprise-gemini-2.5-pro') {
                estimatedTime = '15-20 Áßí';
            }
            gradingTimeEst.textContent = `È¢ÑËÆ°ÈúÄË¶Å ${estimatedTime}`;
            
            // Ê®°ÊãüËøõÂ∫¶Êù°
            let progress = 0;
            const progressInterval = setInterval(() => {
                progress += Math.random() * 8;
                if (progress > 90) progress = 90;
                gradingProgressBar.style.width = `${progress}%`;
                
                if (progress < 30) {
                    gradingProgressText.textContent = 'AIÊ≠£Âú®ÈòÖËØª‰ΩúÊñá...';
                } else if (progress < 60) {
                    gradingProgressText.textContent = 'AIÊ≠£Âú®ÂàÜÊûêËØ≠Ê≥ïÂíåÁî®ËØç...';
                } else {
                    gradingProgressText.textContent = 'AIÊ≠£Âú®ÁîüÊàêÊâπÊîπÊä•Âëä...';
                }
            }, 500);
            
            const result = await gradeEssay(topic, essay, model);
            
            clearInterval(progressInterval);
            gradingProgressBar.style.width = '100%';
            gradingProgressText.textContent = 'ÊâπÊîπÂÆåÊàêÔºÅ';
            
            setTimeout(() => {
                gradingProgress.classList.add('hidden');
                displayGradingResult(result);
                gradingResult.classList.remove('hidden');
                showToast('ÊâπÊîπÂÆåÊàê', 'success');
            }, 500);
            
        } catch (error) {
            console.error('ÊâπÊîπÂ§±Ë¥•:', error);
            gradingProgress.classList.add('hidden');
            gradingInput.classList.remove('hidden');
            showToast('ÊâπÊîπÂ§±Ë¥•: ' + error.message, 'error');
        }
    });
    
    // ÊòæÁ§∫ÊâπÊîπÁªìÊûú
    function displayGradingResult(result) {
        let data;
        try {
            const jsonMatch = result.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                data = JSON.parse(jsonMatch[0]);
            } else {
                throw new Error('Êó†Ê≥ïËß£ÊûêJSON');
            }
        } catch (e) {
            console.error('JSONËß£ÊûêÂ§±Ë¥•:', e);
            data = {
                totalScore: 0,
                scores: { content: 0, language: 0, structure: 0 },
                contentReview: 'ÊâπÊîπÁªìÊûúËß£ÊûêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
                highlights: ['Êó†Ê≥ïËß£Êûê'],
                problems: ['Êó†Ê≥ïËß£Êûê'],
                suggestions: 'ËØ∑ÈáçËØï',
                modelAnswer: 'Êó†',
                tips: 'ËØ∑ÈáçËØï'
            };
        }
        
        // Êõ¥Êñ∞ÊÄªÂàÜ
        totalScoreEl.textContent = `${data.totalScore}/15`;
        
        // Êõ¥Êñ∞ÊòüÁ∫ß
        const stars = Math.round((data.totalScore / 15) * 5);
        scoreStarsEl.textContent = '‚≠ê'.repeat(stars) + '‚òÜ'.repeat(5 - stars);
        
        // Êõ¥Êñ∞ÂàÜÈ°πÂæóÂàÜ
        contentScoreEl.textContent = `${data.scores.content}/5`;
        languageScoreEl.textContent = `${data.scores.language}/7`;
        structureScoreEl.textContent = `${data.scores.structure}/3`;
        
        // ÊûÑÂª∫ËØ¶ÁªÜÊâπÊîπÂç°Áâá
        gradingResultContent.innerHTML = `
            <div class="grading-card">
                <h4>‚úÖ ÂÜÖÂÆπÁÇπËØÑ</h4>
                <div class="content">${data.contentReview}</div>
            </div>
            
            <div class="grading-card">
                <h4>‚ú® ËØ≠Ë®Ä‰∫ÆÁÇπ</h4>
                <div class="content">
                    <ul>
                        ${data.highlights.map(h => `<li>${h}</li>`).join('')}
                    </ul>
                </div>
            </div>
            
            <div class="grading-card">
                <h4>‚ö†Ô∏è Â≠òÂú®ÈóÆÈ¢ò</h4>
                <div class="content">
                    <ul>
                        ${data.problems.map(p => `<li>${p}</li>`).join('')}
                    </ul>
                </div>
            </div>
            
            <div class="grading-card">
                <h4>üí° ÊîπËøõÂª∫ËÆÆ</h4>
                <div class="content">${data.suggestions}</div>
            </div>
            
            <div class="grading-card model-answer-card">
                <h4>üìñ ËåÉÊñáÂèÇËÄÉÔºàÁ∫¶80ËØçÔºâ</h4>
                <div class="content">${data.modelAnswer}</div>
            </div>
            
            <div class="grading-card">
                <h4>üéØ ÊèêÂàÜÁßòËØÄ</h4>
                <div class="content">${data.tips}</div>
            </div>
        `;
    }
    
    // ÊòæÁ§∫ÂÜô‰ΩúÊÄùË∑Ø
    function displayGuidanceResult(result) {
        guidanceContent.innerHTML = `
            <div class="prose prose-purple max-w-none">
                <pre class="whitespace-pre-wrap text-sm leading-relaxed text-gray-700 font-sans">${result}</pre>
            </div>
        `;
    }
    
    // ÊâπÊîπÁªìÊûúÊåâÈíÆ
    copyResultBtn.addEventListener('click', () => {
        const text = gradingResultContent.innerText;
        navigator.clipboard.writeText(text).then(() => {
            showToast('Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø', 'success');
        });
    });
    
    downloadResultBtn.addEventListener('click', () => {
        const totalScore = totalScoreEl.textContent;
        const text = `
Ëã±ËØ≠‰ΩúÊñáÊâπÊîπÊä•Âëä
==================

ÊÄªÂàÜÔºö${totalScore}

${gradingResultContent.innerText}

ÊâπÊîπÊó∂Èó¥Ôºö${new Date().toLocaleString('zh-CN')}
        `.trim();
        
        downloadTextFile(text, `‰ΩúÊñáÊâπÊîπÊä•Âëä_${new Date().toISOString().slice(0, 10)}.txt`);
    });
    
    newGradingBtn.addEventListener('click', () => {
        gradingResult.classList.add('hidden');
        gradingInput.classList.remove('hidden');
        gradingTopic.value = '';
        gradingEssay.value = '';
        gradingWordCount.textContent = '0';
        gradingWordStatus.textContent = '';
        updateGradingButtons();
        gradingProgressBar.style.width = '0%';
    });
    
    // ÂÜô‰ΩúÊÄùË∑ØÊåâÈíÆ
    copyGuidanceBtn.addEventListener('click', () => {
        const text = guidanceContent.innerText;
        navigator.clipboard.writeText(text).then(() => {
            showToast('Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø', 'success');
        });
    });
    
    downloadGuidanceBtn.addEventListener('click', () => {
        const text = `
ÂÜô‰ΩúÊÄùË∑ØÊåáÂØº
==================

${guidanceContent.innerText}

ÁîüÊàêÊó∂Èó¥Ôºö${new Date().toLocaleString('zh-CN')}
        `.trim();
        
        downloadTextFile(text, `ÂÜô‰ΩúÊÄùË∑Ø_${new Date().toISOString().slice(0, 10)}.txt`);
    });
    
    newGuidanceBtn.addEventListener('click', () => {
        guidanceResult.classList.add('hidden');
        gradingInput.classList.remove('hidden');
        gradingProgressBar.style.width = '0%';
    });
}

// ========================================
// APIË∞ÉÁî®ÂáΩÊï∞
// ========================================

// ÊôÆÈÄöOCR
async function callOCR(imageBase64, model) {
    const response = await fetch(`${API_CONFIG.baseURL}/chat/completions`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_CONFIG.apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [{
                role: "user",
                content: [
                    {
                        type: "text",
                        text: `ËØ∑ËØÜÂà´ËøôÂº†ÂõæÁâá‰∏≠ÁöÑÊâÄÊúâÊñáÂ≠óÂÜÖÂÆπ„ÄÇË¶ÅÊ±ÇÔºö
1. ÂáÜÁ°ÆËØÜÂà´ÊâÄÊúâÊñáÂ≠óÔºà‰∏≠Êñá„ÄÅËã±Êñá„ÄÅÊï∞Â≠ó„ÄÅÁ¨¶Âè∑Ôºâ
2. ‰øùÊåÅÂéüÊúâÊ†ºÂºèÂíåÂ∏ÉÂ±Ä
3. Â¶ÇÊûúÊòØË°®Ê†ºÔºå‰øùÊåÅË°®Ê†ºÁªìÊûÑ
4. Âè™ËæìÂá∫ËØÜÂà´ÁöÑÊñáÂ≠óÔºå‰∏çË¶ÅÊ∑ªÂä†‰ªª‰ΩïËß£Èáä

Áõ¥Êé•ËæìÂá∫ËØÜÂà´ÁªìÊûúÔºö`
                    },
                    {
                        type: "image_url",
                        image_url: { url: imageBase64 }
                    }
                ]
            }],
            max_tokens: 4000,
            temperature: 0.1
        })
    });
    
    if (!response.ok) {
        const error = await response.json().catch(() => ({}));
        throw new Error(error.error?.message || `HTTP ${response.status}`);
    }
    
    const data = await response.json();
    return {
        text: data.choices[0].message.content.trim(),
        model: model
    };
}

// ‰ΩúÊñáOCR
async function callEssayOCR(imageBase64, model) {
    const response = await fetch(`${API_CONFIG.baseURL}/chat/completions`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_CONFIG.apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [{
                role: "user",
                content: [
                    {
                        type: "text",
                        text: `ËØ∑ËØÜÂà´ËøôÂº†Ëã±ËØ≠‰ΩúÊñáÂõæÁâá‰∏≠ÁöÑÊâÄÊúâÊñáÂ≠ó„ÄÇËøôÂèØËÉΩÊòØÈ´òËÄÉËã±ËØ≠Â∫îÁî®Êñá‰ΩúÊñáÁöÑÈ¢òÁõÆË¶ÅÊ±ÇÊàñÂ≠¶ÁîüÊâãÂÜô‰ΩúÊñá„ÄÇ

Ë¶ÅÊ±ÇÔºö
1. ÂáÜÁ°ÆËØÜÂà´ÊâÄÊúâËã±ÊñáÂÜÖÂÆπÔºàÂèØËÉΩÊúâÊâãÂÜô‰ΩìÔºâ
2. ‰øùÊåÅÊãºÂÜôÂéüÊ†∑ÔºàÂç≥‰ΩøÊúâÈîôËØØÔºâ
3. ‰øùÊåÅÊÆµËêΩÂíåÊç¢Ë°åÁªìÊûÑ
4. Âè™ËæìÂá∫ËØÜÂà´ÁöÑÊñáÂ≠óÔºå‰∏çË¶ÅÊ∑ªÂä†ËØÑËÆ∫

Áõ¥Êé•ËæìÂá∫ËØÜÂà´ÁöÑÊñáÂ≠óÔºö`
                    },
                    {
                        type: "image_url",
                        image_url: { url: imageBase64 }
                    }
                ]
            }],
            max_tokens: 4000,
            temperature: 0.1
        })
    });
    
    if (!response.ok) {
        const error = await response.json().catch(() => ({}));
        throw new Error(error.error?.message || `HTTP ${response.status}`);
    }
    
    const data = await response.json();
    return {
        text: data.choices[0].message.content.trim(),
        model: model
    };
}

// ÊâπÊîπ‰ΩúÊñá
async function gradeEssay(topic, essay, model) {
    const prompt = APPLICATION_GRADING_PROMPT
        .replace('{TOPIC}', topic)
        .replace('{ESSAY}', essay);
    
    const response = await fetch(`${API_CONFIG.baseURL}/chat/completions`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_CONFIG.apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [{
                role: "user",
                content: prompt
            }],
            max_tokens: 4000,
            temperature: 0.7
        })
    });
    
    if (!response.ok) {
        const error = await response.json().catch(() => ({}));
        throw new Error(error.error?.message || `HTTP ${response.status}`);
    }
    
    const data = await response.json();
    return data.choices[0].message.content.trim();
}

// Ëé∑ÂèñÂÜô‰ΩúÊÄùË∑Ø
async function getWritingGuidance(topic, model) {
    const prompt = WRITING_GUIDANCE_PROMPT.replace('{TOPIC}', topic);
    
    const response = await fetch(`${API_CONFIG.baseURL}/chat/completions`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_CONFIG.apiKey}`
        },
        body: JSON.stringify({
            model: model,
            messages: [{
                role: "user",
                content: prompt
            }],
            max_tokens: 3000,
            temperature: 0.7
        })
    });
    
    if (!response.ok) {
        const error = await response.json().catch(() => ({}));
        throw new Error(error.error?.message || `HTTP ${response.status}`);
    }
    
    const data = await response.json();
    return data.choices[0].message.content.trim();
}

// ========================================
// Â∑•ÂÖ∑ÂáΩÊï∞
// ========================================

function fileToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

function validateImageFile(file, showError = true) {
    const validTypes = ['image/jpeg', 'image/png', 'image/jpg', 'image/webp'];
    if (!validTypes.includes(file.type)) {
        if (showError) showToast('ËØ∑ÈÄâÊã©ÂõæÁâáÊñá‰ª∂ (JPG, PNG, WebP)', 'error');
        return false;
    }
    
    if (file.size > 10 * 1024 * 1024) {
        if (showError) showToast('Êñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá10MB', 'error');
        return false;
    }
    
    return true;
}

function countWords(text) {
    const words = text.trim().split(/\s+/).filter(w => w.length > 0);
    return words.length;
}

function updateWordCount(text, countEl, hintEl) {
    const count = countWords(text);
    countEl.textContent = `Â≠óÊï∞: ${count} ËØç`;
    
    if (count === 0) {
        hintEl.textContent = 'Âª∫ËÆÆ: 80ËØçÂ∑¶Âè≥';
        hintEl.className = 'text-xs text-[#3A3632] opacity-60';
    } else if (count >= 60 && count <= 100) {
        hintEl.textContent = '‚úÖ Â≠óÊï∞ÂêàÈÄÇ';
        hintEl.className = 'text-xs word-count-good';
    } else if (count < 60) {
        hintEl.textContent = `‚ö†Ô∏è ËøòÈúÄÁ∫¶ ${60 - count} ËØç`;
        hintEl.className = 'text-xs word-count-warning';
    } else if (count > 100) {
        hintEl.textContent = `‚ö†Ô∏è Ë∂ÖÂá∫Á∫¶ ${count - 100} ËØç`;
        hintEl.className = 'text-xs word-count-warning';
    }
}

function downloadTextFile(text, filename) {
    const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
}

function showToast(message, type = 'success') {
    const toast = document.createElement('div');
    toast.className = type === 'success' ? 'success-toast' : 'error-toast';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.style.animation = 'slideIn 0.3s ease-out reverse';
        setTimeout(() => toast.remove(), 300);
    }, 3000);
}
